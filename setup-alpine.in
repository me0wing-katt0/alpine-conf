#!/bin/sh

PROGRAM = setup-alpine
VERSION = @VERSION@

PREFIX =
. $PREFIX/lib/libalpine.sh

is_qemu() {
  grep -q "QEMU" /proc/cpuinfo \ || strings /sys/firmware/dmi/tables/DMI 2>/dev/null | grep -q QEMU
}

shift $(expr $OPTIND - 1)

rc_sys = $(openrc --sys)

# mount xenfs so we can detect xen dom0
if ["$rc_sys" = "XENU"] && ! grep -q '^xenfs' /proc/mounts; then
  modprobe xenfs
  mount -t xenfs xenfs /proc/xen
fi

PKGADD = "apk add"

if ["$rc_sys" != LXC]; then
  $PREFIX/sbin/setup-keymap
  $PREFIX/sbin/setup-hostname
fi


$PREFIX/sbin/setup-interfaces -a -r

# setup up dns if no dhcp was configured
grep '^iface.*dhcp' $ROOT/etc/network/interfaces > /dev/null || \
$PREFIX/sbin/setup-dns $ {
    DNSOPTS
}

# set root password
if [-z "$NOCOMMIT"] && [-z "$empty_root_password"]; then
  while ! passwd; do
  echo "Please retry."
  done
fi

$PREFIX/sbin/setup-timezone

rc-update --quiet add networking boot
rc-update --quiet add urandom boot
for svc in acpid cron crond; do
if rc-service --exists $svc; then
  rc-update --quiet add $svc
fi
done

# enable new hostname
rc-service hostname --quiet restart

# start up the services
openrc boot
openrc default

_dn = $(sed -n \
    -e '/^domain[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
    -e '/^search[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
    -e '${g;p;}' /etc/resolv.conf 2>/dev/null)

_hn = $(hostname)
_hn = $ {
    _hn%%.*
}

wget https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts -O /etc/hosts


if [-r "$ROOT/etc/profile"]; then 
  . "$ROOT/etc/profile"
fi

if ! is_qemu && ["$rc_sys" != "LXC"]; then
  $PREFIX/sbin/setup-ntp -c busybox
fi

$PREFIX/sbin/setup-apkrepos -c -1
 
$PREFIX/sbin/setup-sshd

if is_xen_dom0; then
  setup-xen-dom0
fi

#the part where the real fun begins
echo "settin' up cool shit"
apk update
apk upgrade
apk add mesa-dri-nouveau mesa-dri-gallium mesa-dri-intel mesa-dri-classic mesa-dri-ati intel-ucode amd-ucode eudev
setup-eudev
ask "default user username?" "user"
passwd $resp
adduser $resp
adduser $resp input
adduser $resp video
adduser $resp plugdev
adduser $resp wheel
adduser $resp audio
apk add pipewire  sway rtkit xwayland firefox pipewire-pulse pipewire-alsa grim wdisplays wl-clipboard slurp pipewire-jack mpv gcompat libc6-compat ttf-dejavu zsh shadow seatd elogind seatd-launch pavucontrol kitty networkmanager dmenu bemenu dbus-x11 doas wayland-protocols wayland-libs-egl glamor-egl wireplumber avizo-scripts avizo-service micro nano vim
mkdir -p /home/$resp/.config/sway
rc-update add networkmanager
echo "auth       sufficient   pam_shells.so" > /etc/pam.d/chsh
chsh $resp -s /bin/zsh
wget https://raw.githubusercontent.com/me0wing-katt0/configs/main/sway/config -O /home/$resp/.config/sway/config
echo 'alias swayinit="XDG_RUNTIME_DIR=~/.run dbus-launch seatd-launch sway"
alias volup="volumectl +"
alias voldown="volumectl -"
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename "/home/q/.zshrc"

autoload -Uz compinit
compinit
# End of lines added by compinstall' > /home/$resp/.zshrc
echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policyconfig PUBLIC
        "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
        "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
<policyconfig>
        <vendor>Lennart Poettering</vendor>

        <action id="org.freedesktop.RealtimeKit1.acquire-high-priority">
                <description>Grant high priority scheduling to a user process</description>
                <description xml:lang="tr">Bir sürece yüksek öncelikli çalışabilme yetkisi ver</description>
                <message>Authentication is required to grant an application high priority scheduling</message>
                <message xml:lang="tr">Sürecin yüksek öncelikli çalıştırılabilmesi için yetki gerekiyor</message>
                <defaults>
                        <allow_any>yes</allow_any>
                        <allow_inactive>yes</allow_inactive>
                        <allow_active>yes</allow_active>
                </defaults>
        </action>

        <action id="org.freedesktop.RealtimeKit1.acquire-real-time">
                <description>Grant realtime scheduling to a user process</description>
                <description xml:lang="tr">Bir sürece gerçek zamanlı çalışabilme yetkisi ver</description>
                <message>Authentication is required to grant an application realtime scheduling</message>
                <message xml:lang="tr">Sürecin gerçek zamanlı çalıştırılabilmesi için yetki gerekiyor</message>
                <defaults>
                        <allow_any>yes</allow_any>
                        <allow_inactive>yes</allow_inactive>
                        <allow_active>yes</allow_active>
                </defaults>
        </action>

</policyconfig>' > /usr/share/polkit-1/actions/org.freedesktop.RealtimeKit1.policy 
echo "setting up cool shit done! After the script asks you to reboot, reboot to your new system and run 'swayinit'"

if ["$rc_sys" = "LXC"]; then
exit 0
fi

DEFAULT_DISK = sda \
 $PREFIX/sbin/setup-disk -q -m sys || exit
